#include <stdio.h>

union Int32
{
	int x;
	unsigned char bytes[4];
};

int key(union Int32 *a, int ind, int j)
{
	if ((a[j].x) >= 0)
	{
		return 256 + a[j].bytes[ind];
	}
	else
	{
		return a[j].bytes[ind];
	}
}

void dist(union Int32 *a, int n, int ind)
{
	int count[256 * 2];
	int i, k;
	for (i = 0; i < 256 * 2; i++) count[i] = 0;
	for (int j = 0; j < n; j++)
	{
		k = key(a, ind, j);
		count[k]++;
	}

	for (i = 1; i < 256 * 2; i++) count[i] += count[i - 1];
	union Int32 ans[n];
	for (int j = n - 1; j >= 0; j--)
	{
		k = key(a, ind, j);
		i = count[k] - 1;
		count[k] = i;
		ans[i] = a[j];
	}

	for (int i = 0; i < n; i++) a[i] = ans[i];
}

void radix(union Int32 *a, int n)
{
	for (int i = 0; i < 4; i++)
		dist(a, n, i);
}

int main()
{
	int n, i;
	scanf("%d", &n);
	union Int32 nums[n];
	for (i = 0; i < n; i++) scanf("%d", &nums[i].x);
	radix(nums, n);
	for (i = 0; i < n; i++) printf("%d ", nums[i].x);
	return 0;
}
